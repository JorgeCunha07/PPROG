Public Class Proprietario {

private String nome;

private int nif;

private String email;

private int telefone;

private final String NOME_POR_OMISSAO ="Sem Nome";
private final int NIF_POR_OMISSAO = 0 ; 
private final String EMAIL_POR_OMISSAO ="Sem Nome";
private final int TELEFONE_POR_OMISSAO = 0 ;


public Proprietario() {
		this.nome = NOME_POR_OMISSAO;
		this.nif = NIF_POR_OMISSAO;
		this.email = EMAIL_POR_OMISSAO;
                this.telefone = TELEFONE_POR_OMISSAO;
}

public Proprietario(Proprietario proprietario) {
		this.nome = proprietario.getNome();
		this.nif = proprietario.getNif();
		this.email = proprietario.getEmail();
		this.telefone = proprietario.getTelefone();
}

public String getNome(){
return nome;
}

public String getEmail(){
return email;
}

public int getNif(){
return nif;
}

public int getTelefone(){
return telefone;
}

public void setNome(String nome){
this.nome = nome;


}

public void setEmail(String email){
this.email = email;
}

public void setNif(int Nif){
this.nif = nif;

}

public void setTelefone(int telefone){
if(telefone % 1000000000 >0 && telefone % 1000000000 < 10){
this.telefone = telefone;
}else{
throw new NumeroTelefoneInvalido("NÃºmero Invalido");
}

}



@Override
    public String toString() {
        return nome + email + telefone + nif ;

    }
}

public class ArgumentoInvalidoException extends IllegalArgumentException {
    public NumeroTelefoneInvalido(String erro) {
        super(erro);
    }
}


Public abstract Class Imovel implements Serializable{


Private String morada;
Private String localidade;
Private float areaUtil;
Private float preco;

public abstract float calcularValorImovel();

}




Public Class Escritorio extends imoveisHabitacao implements Condominio, Serializable{

Private final int COMISSOES_ESCRITORIO = 7;
Private final float CONDOMINIO_PRECO_AREA = 0,4;


public void setPrecoCondominio(float preco){
CONDOMINIO_PRECO_AREA = preco;
}

public void getPrecoCondominio(){
return CONDOMINIO_PRECO_AREA;
}

@Override
public float calcularCondominio(){

return getareaUtil() * CONDOMINIO_PRECO_AREA;
}


public float calcularValorImovel(){

return getPreco() * COMISSOES_ESCRITORIO * 0.01;
}



}




Public Class imoveisHabitacao extends Imovel implements Serializable{
Private int nrQuartos;

}









Public Class Moradia extends imoveisHabitacao implements Serializable{


Private float areaExterior;
Private final int COMISSOES_INF = 5;
Private final int COMISSOES_SUP = 6;
Private final int VALORCOMISSAO = 150000;

public float calcularValorImovel(){
if(VALORCOMISSAO > getPreco())
return getPreco() * COMISSOES_INF * 0.01;

if(VALORCOMISSAO < getPreco())
return getPreco() * COMISSOES_SUP * 0.01;

 @Override
    public boolean equals(Object o) {
 
        if (o == this) {
            return true;
        }
 
        if (!(o instanceof Moradia)) {
            return false;
        }

        Moradia c = (Moradia) o;
	
ComparatorAlphabeticorder cAO = new ComparatorAlphabeticorder();
ComparatorAreaUtil cAU = new ComparatorAreaUtil();
         
       
        return this.cAO(c) == 0
                && this.cAU(c) == 0;
    }
}











Public Class Apartamento extends imoveisHabitacao implements Condominio,Serializable{

Private final int apartamentos = 0;
Private final int COMISSOES = 4;
Private final float CONDOMINIO_PRECO_AREA = 0,4;


public void setPrecoCondominio(float preco){
CONDOMINIO_PRECO_AREA = preco;
}

public void getPrecoCondominio(){
return CONDOMINIO_PRECO_AREA;
}

public void Apartamento(){
apartamentos++;
}
@Override
public float calcularCondominio(){

return getareaUtil() * CONDOMINIO_PRECO_AREA;
}


public float calcularValorImovel(){

return getPreco() * COMISSOES * 0.01;
}

}





Public Class ComparatorAlphabeticOrder extends comparator<Imovel> {

    @Override
    public int compare( <? extends Imovel> e1 ,<? extends Imovel> e2 ) {
       
	return e1.getLocalidade().compareTo(e2.getLocalidade());
    }

}

Public Class ComparatorAreaUtil extends comparator<Imovel> {

    @Override
    public int compare( <? extends Imovel> e1 ,<? extends Imovel> e2 ) {
       
	if(e1.getAreaUtil() < e2.getAreaUtil()){
	return -1;	
	}else if(e1.getAreaUtil() > e2.getAreaUtil()){
	return 1;}
	else return 0;
    }

}


Public Interface Condominio{

public float calcularCondominio(){
}

}


Public Class ListaImoveis implements Serializable throws IOSException{

ArrayList<Imovel> listaImoveis = new ArrayList<>;


public setLista(ArrayList<Imovel> listaImoveis){

this.listaImoveis = ListaImoveis;
}

Public ArrayList<Imovel>getLista(){
return listaImoveis;
}

Public boolean addLista(Imovel imovel){
return listaImoveis.add(imovel);
}

Public boolean eliminarImovel(){
listaImoveis.sort(new ComparatorAreaUtil());
return listaImoveis.remove.(0)
}

Public float valorImovel(int index){

return listaImoveis.get(index).calcularValorImovel();

}

Public boolean exportarParaFicheiro (String fileName){
try{
FileOutputStream fos = new FileOutputStream(fileName);
ObjectOutputStream oos = new ObjectOutputStream(fos)
oos.WriteObject(listaImoveis);
}catch(IOException e){
System.Out.Println(e.getMessage());
}
oos.close;
fos.close;
}

}
